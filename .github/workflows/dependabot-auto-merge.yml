# Dependabot Auto-merge Workflow
# Automatically tests and merges Dependabot PRs for patch and minor updates
# Requires manual approval for major version updates

name: Dependabot Auto-merge

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  # Test the Dependabot PR
  test-dependabot-pr:
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r ansible-builder/requirements.txt

      - name: Test Python imports
        run: |
          python -c "import netifaces, psutil, hvac, requests, yaml, jinja2; print('‚úÖ All imports successful')"

      - name: Test enhanced load variables script
        run: |
          python -c "
          import sys
          sys.path.append('.')
          try:
              from enhanced_load_variables import EnhancedConfigGenerator
              print('‚úÖ Enhanced load variables script imports successfully')
          except Exception as e:
              print(f'‚ùå Import failed: {e}')
              sys.exit(1)
          "

      - name: Test original load variables script
        run: |
          python -c "
          import sys
          sys.path.append('.')
          try:
              import load_variables
              print('‚úÖ Original load variables script imports successfully')
          except Exception as e:
              print(f'‚ùå Import failed: {e}')
              sys.exit(1)
          "

      - name: Validate YAML files
        run: |
          python -c "
          import yaml
          import os
          
          yaml_files = []
          for root, dirs, files in os.walk('.'):
              for file in files:
                  if file.endswith('.yml') or file.endswith('.yaml'):
                      yaml_files.append(os.path.join(root, file))
          
          for yaml_file in yaml_files:
              try:
                  with open(yaml_file, 'r') as f:
                      yaml.safe_load(f)
                  print(f'‚úÖ {yaml_file} is valid')
              except Exception as e:
                  print(f'‚ùå {yaml_file} is invalid: {e}')
                  exit(1)
          "

  # Auto-merge for patch and minor updates
  auto-merge:
    needs: test-dependabot-pr
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    
    steps:
      - name: Get Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Auto-merge patch and minor updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor'
        run: |
          echo "Auto-merging ${{ steps.metadata.outputs.update-type }} update"
          gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on major updates
        if: steps.metadata.outputs.update-type == 'version-update:semver-major'
        run: |
          gh pr comment "$PR_URL" --body "üö® **Major version update detected!**
          
          This PR contains a major version update that requires manual review:
          - **Package**: ${{ steps.metadata.outputs.dependency-names }}
          - **Update Type**: ${{ steps.metadata.outputs.update-type }}
          - **Previous Version**: ${{ steps.metadata.outputs.previous-version }}
          - **New Version**: ${{ steps.metadata.outputs.new-version }}
          
          Please review the changelog and test thoroughly before merging.
          
          **Testing checklist:**
          - [ ] Test enhanced_load_variables.py functionality
          - [ ] Test network detection features
          - [ ] Test vault integration
          - [ ] Test ansible-builder execution environment
          - [ ] Verify no breaking changes in deployment scripts"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add security label for security updates
        if: contains(steps.metadata.outputs.dependency-names, 'security') || contains(github.event.pull_request.title, 'security')
        run: |
          gh pr edit "$PR_URL" --add-label "security-update,priority-high"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
